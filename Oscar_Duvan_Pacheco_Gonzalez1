 Oscar_Duvan_Pacheco_Gonzalez1


def factorial(n):
    if n==0:
        return 1
    else:
        return n * factorial (n - 1)


def fibonacci(n):
    if n<=1:
        return n
    else:
        return fibonacci(n-1)+ fibonacci(n-2)



def sum_of_numbers(n):
    if n == 0:
        return 0
    else:
        return n + sum_of_numbers ( n - 1)



def power(a, n):
    if n==0:
        return 1
    else:
        return a * power(a, n - 1)



def max_in_list(lst):
    if len(lst) == 1:
        return lst[0]
    else: 
        max_rest = max_in_list(lst[1:])
        return lst[0] if lst[0] > max_rest else max_rest



from models.tree_node import TreeNode

def binary_search(arr: list, target: int):
    left,right=0,len(arr)-1
    while left<=right:
        mid=(left+right)//2
        if arr[mid]==target:
            return mid
        elif arr[mid]<target:
            left= mid+1
        else: right=mid-1
    return -1


def binary_search_matrix(matrix: list[list[int]], target: int)->bool:
    if not matrix or not matrix[0]:
        return False
    filas, columnas=len(matrix),len(matrix[0])
    fila,columa=0,columnas-1
    while fila < filas and columa >= 0:
        if matrix[fila][columa] == target:
            return True
        elif matrix[fila][columa] < target:
            fila += 1
        else:
            columa -=1
    
    return False


def binary_search_tree(root: TreeNode, target: int)-> bool:
    act=root
    while act:
        if act.val==target:
            return True
        elif act.val< target:
            act=act.right
        else:
            act=act.left
    return False

